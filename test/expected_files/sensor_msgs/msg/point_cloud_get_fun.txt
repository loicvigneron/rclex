  ERL_NIF_TERM points[message_p->points.size];

  for (size_t points_i = 0; points_i < message_p->points.size; ++points_i)
  {
    points[points_i] = enif_make_tuple(env, 3,
      enif_make_double(env, message_p->points.data[points_i].x),
      enif_make_double(env, message_p->points.data[points_i].y),
      enif_make_double(env, message_p->points.data[points_i].z)
    );
  }

  ERL_NIF_TERM channels[message_p->channels.size];

  for (size_t channels_i = 0; channels_i < message_p->channels.size; ++channels_i)
  {
    ERL_NIF_TERM channels_values[message_p->channels.data[channels_i].values.size];

    for (size_t channels_values_i = 0; channels_values_i < message_p->channels.data[channels_i].values.size; ++channels_values_i)
    {
      channels_values[channels_values_i] = enif_make_double(env, message_p->channels.data[channels_i].values.data[channels_values_i]);
    }

    channels[channels_i] = enif_make_tuple(env, 2,
      enif_make_binary_wrapper(env, message_p->channels.data[channels_i].name.data, message_p->channels.data[channels_i].name.size),
      enif_make_list_from_array(env, channels_values, message_p->channels.data[channels_i].values.size)
    );
  }

  return enif_make_tuple(env, 3,
    enif_make_tuple(env, 2,
      enif_make_tuple(env, 2,
        enif_make_int(env, message_p->header.stamp.sec),
        enif_make_uint(env, message_p->header.stamp.nanosec)
      ),
      enif_make_binary_wrapper(env, message_p->header.frame_id.data, message_p->header.frame_id.size)
    ),
    enif_make_list_from_array(env, points, message_p->points.size),
    enif_make_list_from_array(env, channels, message_p->channels.size)
  );
