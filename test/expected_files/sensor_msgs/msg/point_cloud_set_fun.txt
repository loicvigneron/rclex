  int header_arity;
  const ERL_NIF_TERM *header_tuple;
  if (!enif_get_tuple(env, tuple[0], &header_arity, &header_tuple))
    return enif_make_badarg(env);

  int header_stamp_arity;
  const ERL_NIF_TERM *header_stamp_tuple;
  if (!enif_get_tuple(env, header_tuple[0], &header_stamp_arity, &header_stamp_tuple))
    return enif_make_badarg(env);

  int header_stamp_sec;
  if (!enif_get_int(env, header_stamp_tuple[0], &header_stamp_sec))
    return enif_make_badarg(env);
  message_p->header.stamp.sec = header_stamp_sec;

  unsigned int header_stamp_nanosec;
  if (!enif_get_uint(env, header_stamp_tuple[1], &header_stamp_nanosec))
    return enif_make_badarg(env);
  message_p->header.stamp.nanosec = header_stamp_nanosec;

  ErlNifBinary header_frame_id_binary;
  if (!enif_inspect_binary(env, header_tuple[1], &header_frame_id_binary))
    return enif_make_badarg(env);

  if (!rosidl_runtime_c__String__assignn(&(message_p->header.frame_id), (const char *)header_frame_id_binary.data, header_frame_id_binary.size))
    return raise(env, __FILE__, __LINE__);

  unsigned int points_length;
  if (!enif_get_list_length(env, tuple[1], &points_length))
    return enif_make_badarg(env);

  geometry_msgs__msg__Point32__Sequence *points = geometry_msgs__msg__Point32__Sequence__create(points_length);
  if (points == NULL) return raise(env, __FILE__, __LINE__);
  message_p->points = *points;

  unsigned int points_i;
  ERL_NIF_TERM points_left, points_head, points_tail;
  for (points_i = 0, points_left = tuple[1]; points_i < points_length; ++points_i, points_left = points_tail)
  {
    if (!enif_get_list_cell(env, points_left, &points_head, &points_tail))
      return enif_make_badarg(env);

    int points_i_arity;
    const ERL_NIF_TERM *points_i_tuple;
    if (!enif_get_tuple(env, points_head, &points_i_arity, &points_i_tuple))
      return enif_make_badarg(env);

    double points_i_x;
    if (!enif_get_double(env, points_i_tuple[0], &points_i_x))
      return enif_make_badarg(env);
    message_p->points.data[points_i].x = (float)points_i_x;

    double points_i_y;
    if (!enif_get_double(env, points_i_tuple[1], &points_i_y))
      return enif_make_badarg(env);
    message_p->points.data[points_i].y = (float)points_i_y;

    double points_i_z;
    if (!enif_get_double(env, points_i_tuple[2], &points_i_z))
      return enif_make_badarg(env);
    message_p->points.data[points_i].z = (float)points_i_z;
  }

  unsigned int channels_length;
  if (!enif_get_list_length(env, tuple[2], &channels_length))
    return enif_make_badarg(env);

  sensor_msgs__msg__ChannelFloat32__Sequence *channels = sensor_msgs__msg__ChannelFloat32__Sequence__create(channels_length);
  if (channels == NULL) return raise(env, __FILE__, __LINE__);
  message_p->channels = *channels;

  unsigned int channels_i;
  ERL_NIF_TERM channels_left, channels_head, channels_tail;
  for (channels_i = 0, channels_left = tuple[2]; channels_i < channels_length; ++channels_i, channels_left = channels_tail)
  {
    if (!enif_get_list_cell(env, channels_left, &channels_head, &channels_tail))
      return enif_make_badarg(env);

    int channels_i_arity;
    const ERL_NIF_TERM *channels_i_tuple;
    if (!enif_get_tuple(env, channels_head, &channels_i_arity, &channels_i_tuple))
      return enif_make_badarg(env);

    ErlNifBinary channels_i_name_binary;
    if (!enif_inspect_binary(env, channels_i_tuple[0], &channels_i_name_binary))
      return enif_make_badarg(env);

    if (!rosidl_runtime_c__String__assignn(&(message_p->channels.data[channels_i].name), (const char *)channels_i_name_binary.data, channels_i_name_binary.size))
      return raise(env, __FILE__, __LINE__);

    unsigned int channels_i_values_length;
    if (!enif_get_list_length(env, channels_i_tuple[1], &channels_i_values_length))
      return enif_make_badarg(env);

    rosidl_runtime_c__float32__Sequence channels_i_values;
    if(!rosidl_runtime_c__float32__Sequence__init(&channels_i_values, channels_i_values_length))
      return enif_make_badarg(env);
    message_p->channels.data[channels_i].values = channels_i_values;

    unsigned int channels_i_values_i;
    ERL_NIF_TERM channels_i_values_left, channels_i_values_head, channels_i_values_tail;
    for (channels_i_values_i = 0, channels_i_values_left = channels_i_tuple[1]; channels_i_values_i < channels_i_values_length; ++channels_i_values_i, channels_i_values_left = channels_i_values_tail)
    {
      if (!enif_get_list_cell(env, channels_i_values_left, &channels_i_values_head, &channels_i_values_tail))
        return enif_make_badarg(env);

      double channels_i_values_float32;
      if (!enif_get_double(env, channels_i_values_head, &channels_i_values_float32))
        return enif_make_badarg(env);
      message_p->channels.data[channels_i].values.data[channels_i_values_i] = (float)channels_i_values_float32;
    }
  }
